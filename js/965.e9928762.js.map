{"version":3,"file":"js/965.e9928762.js","mappings":"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","sources":["webpack://a/./src/components/Table/index.vue","webpack://a/src/components/Table/index.vue","webpack://a/./src/components/Table/index.vue?5fb9","webpack://a/./src/components/Table/index.vue?b0e3"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"span-method\":_vm.objectSpanMethod,\"border\":\"\",\"header-cell-style\":{ textAlign: 'center' }}},_vm._l((_vm.columns),function(item,index){return _c('el-table-column',{key:index,attrs:{\"prop\":item.prop,\"label\":item.label,\"width\":item.width,\"show-overflow-tooltip\":item.show_overflow_tooltip},scopedSlots:_vm._u([{key:\"header\",fn:function(scope){return (item.isHeader)?[_c('span',[_vm._v(\" \"+_vm._s(item.label))]),(item.element == 'input')?_c('el-input',{attrs:{\"placeholder\":\"输入关键字搜索\"},model:{value:(_vm.formData[item.prop]),callback:function ($$v) {_vm.$set(_vm.formData, item.prop, $$v)},expression:\"formData[item.prop]\"}}):_vm._e(),(item.element == 'select')?_c('el-select',{attrs:{\"placeholder\":\"请选择\"},model:{value:(_vm.formData[item.prop]),callback:function ($$v) {_vm.$set(_vm.formData, item.prop, $$v)},expression:\"formData[item.prop]\"}},_vm._l((item.options),function(opt){return _c('el-option',{key:opt.value,attrs:{\"label\":opt.label,\"value\":opt.value}})}),1):_vm._e()]:undefined}},{key:\"default\",fn:function(scope){return [_vm._t('cell-' + item.prop,function(){return [_vm._v(_vm._s(_vm.getDictLabel(item.prop, scope.row[item.prop]))+\" \")]},{\"scope\":scope})]}}],null,true)})}),1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- 组件描述 -->\r\n<!-- 为了实现，表格的头部支持自定义，并且，每一列还有可能不一样，有的是进度条，有的是el-tag 有的列还支持点击执行其他方法，封装该组件就是为了表格可冗余，可自定义结构 -->\r\n<!-- 表格是时候正常写但是每一列，是通过具名插槽返给父组件，父组件可自定义该列，头部form表单也是相对应列的字段，\r\n 但是会有一个问题就是，如果头部有字典，还好说，直接写一个数组，将相对应下拉框的字典取出来push到数组中，然后表格列返显字典相对应的字典值，\r\n 但是有的有问题，有的不是字典，所以，就得自己请求下拉数据，然后push到刚刚的数组里面，最后数组中 的key和coloum中prop相对应，然后将相对应key的value的赋值给options，\r\n 这样就实现了，但是有一个注意点，你像坐落，地址这种多级联动的字段直接渲染字典值，前端会先将后端返回的字符串，转为数组，再去字典里面去作比较，就太费劲了，而且也影响了表格的加载时间，就直接然这种复杂字段，后端直接返回文字就行了 \r\n 现在这版代码，表格头部的表单，没有像坐落的这种的字段，然后是后端请求的，后续会附上\r\n -->\r\n<template>\r\n    <el-table :data=\"tableData\" style=\"width: 100%\" :span-method=\"objectSpanMethod\" border\r\n        :header-cell-style=\"{ textAlign: 'center' }\">\r\n        <el-table-column v-for=\"(item, index) in columns\" :prop=\"item.prop\" :label=\"item.label\" :width=\"item.width\"\r\n            :key=\"index\" :show-overflow-tooltip=\"item.show_overflow_tooltip\">\r\n            <!-- 自定义头 -->\r\n            <template v-if=\"item.isHeader\" slot=\"header\" slot-scope=\"scope\">\r\n                <span> {{ item.label }}</span>\r\n                <el-input v-if=\"item.element == 'input'\" v-model=\"formData[item.prop]\" placeholder=\"输入关键字搜索\" />\r\n                <el-select v-if=\"item.element == 'select'\" v-model=\"formData[item.prop]\" placeholder=\"请选择\">\r\n                    <el-option v-for=\"opt in item.options\" :key=\"opt.value\" :label=\"opt.label\" :value=\"opt.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </template>\r\n            <!-- 自定义列 -->\r\n            <template slot-scope=\"scope\">\r\n                <!-- 使用具名插槽，根据 column.prop 动态命名 -->\r\n                <slot :name=\"'cell-' + item.prop\" :scope=\"scope\">{{ getDictLabel(item.prop, scope.row[item.prop]) }}\r\n                </slot>\r\n            </template>\r\n        </el-table-column>\r\n    </el-table>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        tableData: {\r\n            type: Array,\r\n            default: () => [],\r\n            require: true\r\n        },\r\n        columns: {\r\n            type: Array,\r\n            default: () => [],\r\n            require: true\r\n        },\r\n        dicts: {\r\n\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            formData: {\r\n\r\n\r\n            },\r\n            localColumns: []\r\n\r\n\r\n        }\r\n    },\r\n    mounted() {\r\n        // 需要参照合并的列\r\n        const effectMerge = {\r\n            month_1: ['area'],\r\n            month_3: ['area'],\r\n            province: ['area']\r\n        }\r\n        const arr = ['area', 'province', 'month_1', 'month_2', 'month_3']\r\n        this.setTabelRowSpan(this.tableData, arr, effectMerge)\r\n    },\r\n\r\n    methods: {\r\n        objectSpanMethod({ row, column, rowIndex, columnIndex }) {\r\n            if (row.mergeCell.includes(column.property)) {\r\n                const rowspan = row[`rowspan_${column.property}`]\r\n                if (rowspan) {\r\n                    return { rowspan: rowspan, colspan: 1 }\r\n                } else {\r\n                    return { rowspan: 0, colspan: 0 }\r\n                }\r\n            }\r\n        },\r\n        /**\r\n        * 分析每一列，找出相同的\r\n        * @param data\r\n        */\r\n        setTabelRowSpan(tableData, fieldArr, effectMerge = {}) {\r\n            let lastItem = {}\r\n            fieldArr.forEach((field, index) => {\r\n                let judgeArr = fieldArr.slice(0, index + 1)\r\n                if (effectMerge[field]) {\r\n                    judgeArr = [...effectMerge[field], field]\r\n\r\n                }\r\n                tableData.forEach(item => {\r\n                    item.mergeCell = fieldArr\r\n                    const rowSpan = `rowspan_${field}`\r\n                    // 判断是否合并到上个单元格。\r\n                    if (judgeArr.every(e => lastItem[e] === item[e] && item[e] !== '')) {\r\n                        // 判断是否所在行的列对应的值全部相同，并且此列的值不为空\r\n                        // 是：合并行\r\n                        item[rowSpan] = 0\r\n                        lastItem[rowSpan] += 1\r\n                    } else {\r\n                        // 否：完成一次同类合并。lastItem重新赋值，进入下一次合并计算。\r\n                        item[rowSpan] = 1\r\n                        lastItem = item\r\n                    }\r\n                })\r\n            })\r\n        },\r\n\r\n        getDictLabel(type, value) {\r\n            // 遍历dicts数组\r\n            for (let dict of this.dicts) {\r\n                // 检查当前dict是否有type属性\r\n                if (dict[type]) {\r\n                    // 在type数组中查找匹配的value\r\n                    const dictItem = dict[type].find(item => item.value == value);\r\n                    // 如果找到了匹配项，返回label，否则返回原始value\r\n                    return dictItem ? dictItem.label : value;\r\n                }\r\n            }\r\n            // 如果没有找到匹配的type，返回原始value\r\n            return value;\r\n        }\r\n\r\n    }\r\n}\r\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=9bf78bd4\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticStyle","attrs","tableData","objectSpanMethod","textAlign","_l","columns","item","index","key","prop","label","width","show_overflow_tooltip","scopedSlots","_u","fn","scope","isHeader","_v","_s","element","model","value","formData","callback","$$v","$set","expression","_e","options","opt","undefined","_t","getDictLabel","row","staticRenderFns","props","type","Array","default","require","dicts","data","localColumns","mounted","effectMerge","month_1","month_3","province","arr","setTabelRowSpan","methods","column","rowIndex","columnIndex","mergeCell","includes","property","rowspan","colspan","fieldArr","lastItem","forEach","field","judgeArr","slice","rowSpan","every","e","dict","dictItem","find","component"],"sourceRoot":""}